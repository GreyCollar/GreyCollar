import { Card } from "@mui/material";
import TitleBar from "../../components/TitleBar/TitleBar";
import VoiceGeneratorPanel from "../../components/VoiceGeneratorPanel";
import axios from "axios";
import styles from "./styles";
import useColleagueState from "../../hooks/useColleagueState";
import { useParams } from "react-router-dom";

import React, { useCallback, useEffect, useState } from "react";

function VoiceGeneratorWidget() {
  //TODO: Reduce state clutter by using useReducer or custom hook
  const { colleagueState, getColleagueById, editColleague } =
    useColleagueState();

  const params = useParams();

  const fetchColleague = useCallback(async () => {
    await getColleagueById(params?.colleagueId);
  }, [getColleagueById, params?.colleagueId]);

  const [gender, setGender] = useState("male");
  const [age, setAge] = useState("young");
  const [accent, setAccent] = useState("american");
  const [accentStrength, setAccentStrength] = useState(100);
  const [temporaryVoiceID, setTemporaryVoiceID] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [canUseVoice, setCanUseVoice] = useState(false);
  const [voiceId, setVoiceId] = useState(
    colleagueState?.colleagueToEdit?.voiceId || ""
  );
  const [isSamplingVoice, setIsSamplingVoice] = useState(false);
  const [isCreatingPermanentVoice, setIsCreatingPermanentVoice] =
    useState(false);
  const [isCollapsed, setIsCollapsed] = useState(false); // New state variable to manage the collapse

  //TODO: make sure text is long enough (100 characters)
  const [text, setText] = useState(
    "Oh, itâ€™s quite simple Mr Frodo. If you are a friend, you speak the password, and the doors will open."
  );

  const toggleCollapse = () => {
    setIsCollapsed(!isCollapsed);
  };

  useEffect(() => {
    fetchColleague();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const generateTemporaryVoice = async () => {
    setIsLoading(true);
    const url =
      "http://localhost:5001/elevenlabs/voice-generation/generate-voice";
    const headers = {
      "Content-Type": "application/json",
    };
    const data = {
      text,
      gender,
      accent,
      age,
      accent_strength: accentStrength / 100,
    };
    try {
      const response = await axios.post(url, data, {
        headers,
        responseType: "arraybuffer",
      });

      const audioUrl = window.URL.createObjectURL(
        new Blob([response.data], { type: "audio/mpeg" })
      );
      const audio = new Audio(audioUrl);
      audio.play();
      const generatedVoiceId = response.headers["generated_voice_id"];
      setTemporaryVoiceID(generatedVoiceId);
      setCanUseVoice(true);
      setIsLoading(false);
    } catch (error) {
      console.error("Error generating temporary voice:", error);
      setIsLoading(false);
    }
  };

  const createPermanentVoice = async (temporaryVoiceID) => {
    setIsCreatingPermanentVoice(true);
    const url =
      "http://localhost:5001/elevenlabs/voice-generation/create-voice";
    const headers = {
      "Content-Type": "application/json",
    };
    const data = {
      voice_name: colleagueState?.colleagueToEdit?.name,
      generated_voice_id: temporaryVoiceID,
      voice_description: "This is a voice generated by Eleven Labs.",
    };

    try {
      const response = await axios.post(url, data, { headers });
      setVoiceId(response.data.voice_id);
      const updatedColleague = {
        ...colleagueState?.colleagueToEdit,
        voiceId: response.data.voice_id,
      };
      await editColleague(colleagueState?.colleagueToEdit.id, updatedColleague);
    } catch (error) {
      console.error("Error creating permanent voice:", error);
    }
    setIsCreatingPermanentVoice(false);
  };

  const sampleVoice = async () => {
    setIsSamplingVoice(true);
    const url = `http://localhost:5001/elevenlabs/text-to-speech/${voiceId}`;
    if (voiceId) {
      const headers = {
        "Content-Type": "application/json",
      };
      const data = {
        text,
        model_id: "eleven_monolingual_v1",
        voice_settings: {
          stability: 0.5,
          similarity_boost: 0.5,
        },
      };
      try {
        const response = await axios.post(url, data, {
          headers,
          responseType: "blob",
        });
        const audioUrl = window.URL.createObjectURL(new Blob([response.data]));
        const audio = new Audio(audioUrl);
        audio.play();
      } catch (error) {
        console.error("Error generating speech:", error);
      }
      setIsSamplingVoice(false);
    }
  };

  return (
    <Card elevation={6} sx={styles.card}>
      <TitleBar title={"Generate Voice"} />
      <VoiceGeneratorPanel
        open={isCollapsed}
        handleClose={toggleCollapse}
        generateTemporaryVoice={generateTemporaryVoice}
        createPermanentVoice={createPermanentVoice}
        temporaryVoiceID={temporaryVoiceID}
        isLoading={isLoading}
        canUseVoice={canUseVoice}
        isCreatingPermanentVoice={isCreatingPermanentVoice}
        sampleVoice={sampleVoice}
        isSamplingVoice={isSamplingVoice}
        gender={gender}
        setGender={setGender}
        age={age}
        setAge={setAge}
        accent={accent}
        setAccent={setAccent}
        accentStrength={accentStrength}
        setAccentStrength={setAccentStrength}
        text={text}
        setText={setText}
      />
    </Card>
  );
}

export default VoiceGeneratorWidget;
